name: CI
on: [push, pull_request]
jobs:
  init:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
    - id: detect-module-changes
      name: Detect module changes
      run: |
        set -euo pipefail

        base_ref="HEAD^"
        if [[ -n "${GITHUB_BASE_REF}" ]]; then
          git fetch --no-write-fetch-head origin "${GITHUB_BASE_REF}"
          base_ref="origin/${GITHUB_BASE_REF}"
        fi

        # Get the list of modules under the root.
        modules="$(find . -mindepth 2 -name go.mod -printf '%h\0' | xargs -0 realpath --relative-to=. | sort)"

        # Get a list of changed files under the root, excluding Markdown.
        changed_dirs="$(git diff --name-only "${base_ref}" -- . ':!*.md' | sed -e '/\/.*/!c\.' -e ';s///' | sort | uniq)"

        # Compute module differences. If anything appears in the second column,
        # it is outside of a module and we'll rebuild everything. Otherwise,
        # we'll rebuild only what's in the third column. (The first column is
        # just the list of available modules.)
        read -r nr_unchanged_modules nr_changed_ext nr_changed_modules _ < <(comm -123 --total /dev/fd/3 /dev/fd/4 3< <(printf "%s" "$modules") 4< <(printf "%s" "$changed_dirs"))

        # Set the modules to process to the changes only.
        if [[ "$nr_changed_ext" == 0 ]]; then
          echo "Running CI for ${nr_changed_modules} changed module(s)."
          modules="$changed_dirs"
        else
          echo "Detected ${nr_changed_ext} change(s) to non-module directories, so running CI for all modules."
        fi

        echo "::set-output name=modules::$(jq -cnR '[inputs | select(length > 0)]' <<<"${modules}")"
    outputs:
      modules: ${{ steps.detect-module-changes.outputs.modules }}
  lint:
    runs-on: ubuntu-latest
    needs: init
    if: fromJSON(needs.init.outputs.modules)[0] != null
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJSON(needs.init.outputs.modules) }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v3
      with:
        go-version-file: ${{ matrix.module }}/go.mod
    - uses: golangci/golangci-lint-action@v3
      with:
        version: v1.46
        working-directory: ${{ matrix.module }}
        args: --timeout=10m --issues-exit-code=0
  test:
    runs-on: ubuntu-latest
    needs: init
    if: fromJSON(needs.init.outputs.modules)[0] != null
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJSON(needs.init.outputs.modules) }}
    defaults:
      run:
        working-directory: ${{ matrix.module }}
    steps:
    - uses: actions/checkout@v3
    - id: setup-go
      uses: actions/setup-go@v3
      with:
        go-version-file: ${{ matrix.module }}/go.mod
    - uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ~/go/pkg/sumdb
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - id: install-k3d
      name: Install k3d
      if: ${{ matrix.module == 'k8sutil' }}
      run: |
        curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash
    - name: Set up Kubernetes cluster
      if: ${{ steps.install-k3d.outcome == 'success' }}
      env:
        KUBECONFIG: /tmp/kubeconfig
      run: |
        # Container names are shared between jobs, so we need to generate
        # unique ones.
        cluster_name="leg-test-$(tr -dc 'a-z0-9' </dev/urandom 2>/dev/null | dd bs=1 count=12 status=none)"

        k3d cluster create --no-rollback "$cluster_name"
        echo LEG_K8SUTIL_TEST_E2E_KUBECONFIG="${KUBECONFIG}" >>"${GITHUB_ENV}"
    - name: Install gotestsum
      run: |
        # Go changed behavior for installing binaries with module support in
        # 1.16, so check whether we can use the new format first.
        latest=
        if dpkg --compare-versions ${{ steps.setup-go.outputs.go-version }} ge 1.16; then
          latest=@latest
        fi

        go install "gotest.tools/gotestsum${latest}"
    - name: Test
      run: |
        gotestsum -f testname --no-summary output --packages ./... -- -race
